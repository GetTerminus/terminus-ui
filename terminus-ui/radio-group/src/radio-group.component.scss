@import './../../scss/helpers/color';
@import './../../scss/helpers/cursors';
@import './../../scss/helpers/layout';
@import './../../scss/helpers/reset';
@import './../../scss/helpers/spacing';
@import './../../scss/helpers/typography';


//
// @component
//  Radio Group
// @description
//  A component to display a group of radio buttons
//
.ts-radio-group {
  @include reset;
  display: block;

  // Top level styles belong here
  .c-radio {
    @include typography;
    // Reset fieldset styles
    border: 0;
    display: block;
    // set up for absolutely positioned validation messages
    position: relative;
  }
}


// <mat-radio-group>
.c-radio {
  // <mat-radio-button> Nested classes belong here
  .c-radio__control {
    display: block;
    margin-bottom: spacing(small, 2);
  }

  // <small> radio sub-label
  .c-radio__control-sublabel {
    @include typography(caption);
    color: color(utility);
    display: block;
    line-height: 1.2em;
  }
}


// Class added when sublabels are present
.c-radio--sublabel {
  $sublabel-padding: 1.25em;

  // Create space for validation messages (this is usually handled by `mat-form-field`
  padding-bottom: $sublabel-padding;

  .c-radio__control {
    .mat-radio-label {
      align-items: start;
    }
  }
}


/**
 * Visual Mode
 */

.c-radio--visual {
  &.c-radio--small {
    .c-radio__control {
      @include responsive-ratio(3, 1);
    }
  }

  // <legend> Overwrite styles added by bootstrap
  .c-radio__legend {
    all: unset;
  }

  // <div> wrapper for all options
  .c-radio__options {
    display: grid;
    grid-gap: spacing(small);
    grid-template-columns: repeat(auto-fill, minmax(12em, 1fr));
  }

  // <label> container for a single option
  .c-radio__control {
    @include responsive-ratio(1, 1);
    overflow: hidden;
    padding: spacing(default);
    position: relative;
  }

  // <div> container for radio content
  .c-radio__content {
    @include take-space;
    align-items: center;
    border: 1px solid color(utility, light);
    border-radius: 3px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: spacing(small);
    transition: border-color 200ms ease-in;

    &:focus,
    &:hover {
      &:not(.c-radio__content--disabled) {
        border-color: color(primary);
        cursor: cursor(pointer);
      }
    }

    // Create blue triangle at top right for the icon to display over
    &::after {
      border-color: transparent;
      border-right-color: color(primary);
      border-style: solid;
      border-top-color: color(primary);
      border-width: 1em;
      content: '';
      opacity: 0;
      position: absolute;
      right: -1px;
      top: -1px;
      // Local z-index:
      // stylelint-disable-next-line scale-unlimited/declaration-strict-value
      z-index: 1;
    }

    // Class added when the option is disabled
    &--disabled {
      color: color(utility);
      cursor: cursor(not-allowed);
    }
  }

  // <div> container for checked icon
  .c-radio__content-checkmark {
    color: color(pure);
    opacity: 0;
    position: absolute;
    right: .1em;
    top: -.2em;
    transition: opacity 200ms ease;
    will-change: opacity;
    // Local z-index:
    // stylelint-disable-next-line scale-unlimited/declaration-strict-value
    z-index: 2;
  }

  // <input> radio input
  .c-radio__input {
    display: none;

    // Styles for selected option
    &:checked {
      ~ .c-radio__content {
        &:not(.c-radio__content--disabled) {
          border: 1px solid color(primary);
        }

        // If selected AND disabled
        &.c-radio__content--disabled {
          border: 1px solid color(utility, dark);
          color: color(utility, dark);

          &::after {
            border-right-color: color(utility, dark);
            border-top-color: color(utility, dark);
          }
        }

        // Make the checkmark visible
        &::after {
          opacity: 1;
        }

        .c-radio__content-checkmark {
          opacity: 1;
        }
      }
    }
  }
}
