@import '../../scss/animation/animation';
@import '../../scss/reset/reset';
@import '../../scss/color/color';
@import '../../scss/cursors/cursors';
@import '../../scss/layout/layout';
@import '../../scss/shadows/shadows';
@import '../../scss/spacing/spacing';
@import '../../scss/typography/typography';

$ts-drawer-content-z-index: 1;
$ts-drawer-push-drawer-z-index: 2;
$ts-drawer-backdrop-z-index: 3;
$ts-drawer-over-drawer-z-index: 4;
$ts-drawer-header-footer-z-index: 5;
$ts-animation-duration: 400ms;

// Mixin that creates a new stacking context.
@mixin ts-drawer-stacking-context($z-index: 1) {
  position: relative;
  // Use a z-index to create a new stacking context. (We can't use transform because it breaks fixed
  // positioning inside of the transformed element).
  z-index: $z-index;
}

.ts-drawer-container {
  // We need a stacking context here so that the backdrop and drawers are clipped to the
  // TsDrawerContainer. This creates a new z-index stack so we use low numbered z-indices.
  // We create another stacking context in the '.ts-drawer-content' and in each drawer so that
  // the application content does not get messed up with our own CSS.
  @include ts-drawer-stacking-context;
  box-sizing: border-box;
  // Need this to take up space in the layout.
  display: block;
  -webkit-overflow-scrolling: touch;

  // Note that the `NoopAnimationsModule` is being handled inside of the component code.
  &.ng-animate-disabled,
  .ng-animate-disabled & {
    .ts-drawer__backdrop,
    .ts-drawer-content {
      transition: none;
    }
  }
}

.ts-drawer__backdrop {
  @include take-space;

  display: block;
  // We use 'visibility: hidden | visible' because 'display: none' will not animate any
  // transitions, while visibility will interpolate transitions properly.
  visibility: hidden;
  z-index: $ts-drawer-backdrop-z-index;
  &.ts-drawer__backdrop--visible {
    visibility: visible;
  }

  .ts-drawer-transition & {
    transition: {
      duration: $ts-animation-duration;
      property: background-color, visibility;
      timing-function: cubic-bezier($g-material-background-easing);
    }
  }
}

.ts-drawer-content {
  @include ts-drawer-stacking-context($ts-drawer-content-z-index);

  display: block;
  height: 100%;
  overflow: auto;

  .ts-drawer-transition & {
    transition: {
      duration: $ts-animation-duration;
      property: transform, margin-left, margin-right;
      timing-function: cubic-bezier($g-material-background-easing);
    }
  }
}

.ts-drawer__inner-container {
  flex: 1 0 0;
  overflow-y: scroll;
}

.ts-drawer {
  @include ts-drawer-stacking-context($ts-drawer-over-drawer-z-index);
  @include elevation-element(menu);
  $high-contrast-border: solid 1px currentColor;
  background-color: color(pure);
  bottom: 0;
  box-sizing: border-box;

  display: flex;
  flex-direction: column;
  overflow-y: auto;
  position: absolute;
  top: 0;
  z-index: $ts-drawer-backdrop-z-index;

  &.ts-drawer--push {
    z-index: $ts-drawer-push-drawer-z-index;
  }

  &.ts-drawer--end {
    right: 0;
  }

  .ts-drawer-header {
    border-bottom: 1px solid color(utility, light);
    display: block;
    max-width: inherit;
    overflow-wrap: break-word;
    top: 0;
    width: inherit;
    z-index: $ts-drawer-header-footer-z-index;
  }
  .ts-drawer-footer {
    border-top: 1px solid color(utility, light);
    bottom: 0;
    max-width: inherit;
    overflow-wrap: break-word;
    width: inherit;
    z-index: $ts-drawer-header-footer-z-index;
  }
}


