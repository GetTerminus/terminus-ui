@import 'true';
@import './breakpoints';


@include describe ('breakpoints') {
  @include test ('should correctly media query for "layout-xs"') {
    @include assert {
      @include output {
        .xs-test {
          @include bp(layout-xs){
            content: 'hello';
          }
        }
      }
      @include expect {
        .xs-test {
          @media (max-width: 599px) {
            content: 'hello';
          }
        }
      }
    }
  }

  @include test ('should correctly media query for "layout-gt-xs"') {
    @include assert {
      @include output {
        .gt-xs-test {
          @include bp(layout-gt-xs){
            content: 'hello';
          }
        }
      }
      @include expect {
        .gt-xs-test {
          @media (min-width: 600px) {
            content: 'hello';
          }
        }
      }
    }
  }

  @include test ('should correctly media query for "layout-sm"') {
    @include assert {
      @include output {
        @include bp(layout-sm){
          .sm-test {
            content: 'hello';
          }
        }
      }
      @include expect {
        .sm-test {
          @media (min-width: 600px) and (max-width: 959px) {
            content: 'hello';
          }
        }
      }
    }
  }

  @include test ('should correctly media query for "layout-gt-sm"') {
    @include assert {
      @include output {
        @include bp(layout-gt-sm){
          .gt-sm-test {
            content: 'hello';
          }
        }
      }
      @include expect {
          @media (min-width: 960px) {
            .gt-sm-test {
              content: 'hello';
            }
          }
      }
    }
  }

  @include test ('should correctly media query for "layout-mat"') {
    @include assert {
      @include output {
        @include bp(layout-mat) {
          .mat-test {
            content: 'hello';
          }
        }
      }
      @include expect {
        .mat-test {
          @media (min-width: 960px) and (max-width: 1279px) {
            content: 'hello';
          }
        }      
      }
    }
  }

  @include test ('should correctly media query for "layout-gt-mat"') {
    @include assert {
      @include output {
        @include bp(layout-gt-mat){
          .gt-mat-test {
            content: 'hello';
          }
        }
      }
      @include expect {
        .gt-mat-test {
          @media (min-width: 1280px) {
            content: 'hello';
          }
        }
      }
    }
  }

  @include test ('should correctly media query for "layout-lg"') {
    @include assert {
      @include output {
        @include bp(layout-lg){
          .lg-test {
            content: 'hello';
          }
        }
      }
      @include expect {
        .lg-test {
          @media (min-width: 1280px) and (max-width: 1919px) {
            content: 'hello';
          }
        }
      }
    }
  }

  @include test ('should correctly media query for "layout-gt-lg"') {
    @include assert {
      @include output {
        @include bp(layout-gt-lg){
          .gt-lg-test {
            content: 'hello';
          }
        }
      }
      @include expect {
        .gt-lg-test {
          @media (min-width: 1920px){
            content: 'hello';
          }
        }
      }
    }
  }

  @include test ('should correctly media query for "layout-xl"') {
    @include assert {
      @include output {
        @include bp(layout-xl){
          .xl-test {
            content: 'hello';
          }
        }
      }
      @include expect {
        .xl-test {
          @media (min-width: 1920px) {
            content: 'hello';
          }
        }
      }
    }
  }
}
