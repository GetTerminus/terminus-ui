@import './../../scss/helpers/color';
@import './../../scss/helpers/cursors';
@import './../../scss/helpers/layout';
@import './../../scss/helpers/reset';
@import './../../scss/helpers/spacing';
@import './../../scss/helpers/scrollbars';
@import './../../scss/helpers/typography';


//
// @component
//  Table
// @description
//  A table component
.ts-table {
  --table-bg: #{color(pure)};
  --header-bg: #{color(utility, light)};
  --header-text-color: #{color(pure, dark)};
  --border-color: #{color(utility, light)};
  $primary: color(primary);
  --drop-bg: #{desaturate(lighten($primary, 66%), 70%)};
  // NOTE: This must be above 40 as that is the number of header cell z-indexes set
  --header-cell-sticky-z-index: 50;
  --row-cell-sticky-z-index: 3;
  --z-index-negative: -1;
  --z-index-base-context: 1;
  @include reset;
  @include typography;
  @include visible-scrollbars;
  border: 1px solid var(--border-color);
  display: block;
  max-height: 100%;
  max-width: 100%;
  overflow: scroll;

  // <div> Inner wrapper for the table
  &__inner {
    display: table;
  }

  // Class added to all sticky cells and rows
  .ts-table--sticky {
    &:not(.ts-table--sticky-end) {
      // NOTE: Important needed to overwrite inline style
      // stylelint-disable-next-line declaration-no-important
      z-index: var(--row-cell-sticky-z-index) !important;
    }

    // Since the sticky cell has a right border at all times, we can remove the left border from the cell that immediately follows it.
    + .ts-cell,
    + .ts-header-cell {
      border-left: none;
    }
  }

  // Class added to all sticky-end cells
  .ts-table--sticky-end {
    z-index: var(--z-index-negative);

    // For the last sticky cell of a row, hide the overflow so that the resize grabber doesn't create extra space past the final cell.
    &:last-of-type {
      &.ts-header-cell {
        overflow: hidden;

        // Move the resizer back into view since we aren't overlapping a following cell
        .ts-header-cell__resizer {
          transform: translateX(40%);
        }
      }
    }
  }

  // Any row
  .ts-row,
  .ts-header-row {
    align-items: stretch;
    box-sizing: border-box;
    display: table-row;
    white-space: nowrap;

    .ts-cell {
      &:not(last-of-type) {
        &:not(.ts-table--sticky) {
          border-right: none;
        }
      }
    }

    // No border needed for the bottom of the last row since the table already has one
    &:not(last-of-type) {
      .ts-cell {
        border-bottom: none;
      }
    }
  }

  // Header row
  .ts-header-row {
    @include typography(caption);
    $increased-weight: bold;
    color: var(--header-text-color);
    font-weight: $increased-weight;
    transition: background-color 200ms ease-out;
    // Create base z-index context
    z-index: var(--z-index-base-context);

    .ts-table--sticky {
      // NOTE: Important needed to overwrite inline style from the CDK
      // stylelint-disable-next-line declaration-no-important
      z-index: var(--header-cell-sticky-z-index) !important;
    }
  }

  // Body row
  .ts-row {
    z-index: var(--z-index-negative);

    &:hover {
      .ts-cell {
        background-color: var(--drop-bg);
      }
    }

    &:first-of-type {
      .ts-cell {
        border-top: none;
      }
    }

    // Workaround for https://goo.gl/pFmjJD in IE 11. Adds a pseudo
    // element that will stretch the row the correct height. See:
    // https://connect.microsoft.com/IE/feedback/details/802625
    &::after {
      content: '';
      display: inline-block;
      min-height: inherit;
    }
  }

  // Any cell
  .ts-cell,
  .ts-header-cell {
    display: table-cell;
    min-height: inherit;
    position: relative;
    word-wrap: break-word;

    // The table already has a border
    &:first-of-type {
      border-left: none;
    }

    // Class added if a column should not wrap
    &.ts-column-no-wrap {
      white-space: nowrap;
    }

    &--align-right {
      text-align: right;

      .ts-sort-header-container {
        justify-content: flex-end;
      }
    }
  }

  // Body cell
  .ts-cell {
    background-color: var(--table-bg);
    border: 1px solid var(--border-color);
    overflow: hidden;
    padding: spacing(default);
    text-overflow: ellipsis;
    transition: background-color 200ms ease-out;
    vertical-align: middle;

    &.ts-table--sticky {
      background-color: var(--table-bg);
    }
  }

  // Header cell
  .ts-header-cell {
    background-color: var(--header-bg);
    border-bottom: 1px solid color(utility);
    border-top: none;
    padding: spacing(default);
    position: sticky;
    top: 0;

    &:not(first-of-type) {
      border-left: 1px solid color(utility);
    }

    // Reverse the natural z-index order so that all borders on the right created with box-shadow are visible above the following cell.
    // Supports up to 40 columns
    $possible-columns: 40;
    @for $i from 1 through $possible-columns {
      &:nth-child(#{$i}) {
        $z: #{$possible-columns - $i};
        z-index: $z;
      }
    }

    // Class added when the column is sorted
    &.ts-sort-header-sorted {
      color: color(accent);
    }

    // Class added when the user hovers the resize column hit area
    &.ts-cell--resizing {
      .ts-header-cell__resizer {
        $resizer-width: #{spacing(small, 2)};
        opacity: 1;

        &::before {
          width: 7px;
        }
      }
    }

    // <span> 'Grabber' hit area to resize a column
    &__resizer {
      bottom: -1px;
      cursor: cursor(col-resize);
      display: block;
      opacity: 0;
      position: absolute;
      right: 0;
      top: -1px;
      transform: translateX(50%);
      transition: opacity 200ms ease-out;
      width: spacing(large);

      // Visible container for grabber
      &::before {
        background-color: color(primary);
        bottom: 0;
        content: '';
        display: block;
        left: 50%;
        position: absolute;
        top: 0;
        transform: translateX(-50%);
        transition: width 100ms ease-out;
        width: 1px;
        z-index: var(--z-index-base-context);
      }

      // Dots inside grabber
      &::after {
        --z-index-above-bg: 2;
        --grabber-icon-font-size: 14px;
        color: color(utility, xlight);
        content: '\2026';
        display: block;
        font-size: var(--grabber-icon-font-size);
        height: 11px;
        left: 50%;
        position: absolute;
        top: 30%;
        transform: rotate(90deg) translate(50%, -3px);
        z-index: var(--z-index-above-bg);
      }
    }
  }
}
