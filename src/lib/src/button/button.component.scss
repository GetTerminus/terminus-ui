@import 'ladda/css/ladda';
@import './../scss/helpers/typography';
@import './../scss/helpers/color';
@import './../scss/helpers/spacing';
@import './../scss/helpers/animation';
@import './../scss/helpers/cursors';


// This makes the bottom padding space look better than the default 36px
$button-line-height: 35px;
$rotation: 360deg;
// NOTE: All transition durations are based off of the content transition. We should only need to
// adjust this value.
$content-transition-duration: 500ms;
$icon-transition-duration-collapse: $content-transition-duration - 100ms; // 400
$icon-transition-duration-expand: $icon-transition-duration-collapse - 100ms; // 300
$label-transition-duration: $icon-transition-duration-expand - 100ms; // 200
$color-transition-duration: $label-transition-duration - 100ms; // 100
$no-interaction-opacity: .7;

$color-transition: color $color-transition-duration $g-easing;
// FIXME: This exact transition is needed in the link styles (when inside a menu, links emulate
// button styles). How can we share something this specific? Or simply make this more generic
$background-transition: background $icon-transition-duration-collapse $g-material-background-easing;
$shadow-transition: box-shadow $icon-transition-duration-expand $g-material-shadow-easing;
$padding-transition: padding $label-transition-duration $g-easing;
$ladda-background-transition: background $color-transition-duration $g-easing;

// Styles applied when the button should collapse
@mixin collapsed {
  .ladda-label {
    padding-left: spacing(small, 3x);
    padding-right: spacing(small, 3x);
  }

  .mat-icon {
    // center the icon
    left: .1em;
    position: relative;
    transform: rotate(#{$rotation});
    transition-duration: $icon-transition-duration-collapse;
  }

  // collapse the text content
  .c-button__content {
    max-width: 0;
  }
}

:host {
  display: inline-block;

  // NOTE: This is a hack of sorts to disable a ts-menu from opening. The menu trigger still seems
  // to be bound even when disabled.
  // pointer-events: none;
  &[data-disabled='true'] {
    .c-button {
      @include cursor(not-allowed);
    }
  }
}


//
// @component
//  Button
// @description
//  A button component
//
.c-button {
  // Top level styles should be nested here
  &#{&} {
    @include typography;
    border: 1px solid transparent;
    color: color(pure);
    line-height: $button-line-height;
    // Overwrite material min-width
    min-width: auto;
    padding: 0;
    // sass-lint:disable no-important
    // Important needed to override the `!important` within the ladda styles
    transition: $color-transition, $background-transition, $shadow-transition !important;
    // sass-lint:enable no-important
    will-change: background, color, contents;

    &[disabled] {
      @include cursor(not-allowed);

      // Lighten text when disabled
      .ladda-label {
        opacity: $no-interaction-opacity;
      }
    }

    &.ladda-button {
      .ladda-label {
        $padding-horizontal: 16px;
        $padding-horizontal-total: $padding-horizontal * 2;

        // Force the ladda label to fill the entire button. (the mat-ripple will be inside the
        // ladda-label and will appear cut off otherwise)
        display: inline-block;
        height: 100%;
        padding: 0 $padding-horizontal;
        position: static;
        // sass-lint:disable no-important
        // Important needed to override the `!important` within the ladda styles
        transition: $color-transition, $ladda-background-transition, $padding-transition !important;
        // sass-lint:enable no-important
        will-change: color, background, padding;
      }

      &[data-loading] {
        .ladda-label {
          opacity: $no-interaction-opacity;
        }
      }

      &[data-style='expand-right'] {
        // Lessen the right side padding while expanded
        &[data-loading] {
          padding-right: 30px;
        }
      }
    }

    // Added by ladda
    &[data-loading] {
      .ladda-spinner {
        display: block;
      }
    }

    // Needed because of a conflict between Material and Ladda
    .ladda-spinner {
      // Initially hidden since the inner HTML is not removed until after the `data-loading` attr is
      // removed from the button
      display: none;
      position: absolute;
      top: 50%;
    }
  }

  // Adjust icon vertical layout
  .mat-icon {
    // Fix small vertical aligment issue between icon & text
    margin-top: -.1em;
    transition: transform $icon-transition-duration-expand $g-easing;
    vertical-align: middle;
    will-change: transform;
  }




  // Define theme styles
  $themes: primary accent warn;

  // Loop through using each theme name to create styles
  @each $theme in $themes {

    // Theme class sets the colors for standard buttons
    &.c-button--#{$theme} {
      background-color: color(#{$theme});

      &[disabled] {
        background-color: color(utility, light);
        color: color(utility);
      }

      // Collapsable button
      &.c-button--collapsable {
        border-radius: 2em;

        .c-button__content {
          display: inline-block;
          max-width: 400px;
          overflow: hidden;
          transition: max-width $content-transition-duration $g-easing;
          white-space: nowrap;
          will-change: max-width;
        }
      }

      // Hollow button
      &.c-button--hollow {
        background-color: transparent;
        border-color: color(#{$theme});
        box-shadow: none;
        color: color(#{$theme});

        &:focus,
        &:hover {
          background-color: color(#{$theme});
          color: color(pure);
        }

        &[disabled] {
          background-color: transparent;
          border-color: color(utility);
          color: color(utility);
        }
      }
    }
  }

  // Collapsed and not focused or hovered
  &.c-button--collapsed {
    &:not(:hover) {
      &:not(:focus) {
        @include collapsed;
      }
    }
  }

  // When collapsable AND disabled
  &.c-button--collapsable {
    &[disabled] {
      @include collapsed;
    }
  }
}


//
// Target button instances nested inside a TsMenuComponent
.c-button {
  .mat-menu-panel & {
    // needed for specificity
    &.c-button {
      background-color: transparent;
      box-shadow: none;
      color: color(pure, dark);
      text-align: left;
      width: 100%;

      &:focus,
      &:active,
      &:hover {
        background-color: color(utility, xlight);
        box-shadow: none;
        color: color(primary);
      }
    }
  }
}


