/**
 * The spacing default
 *
 * @nuclide spacing
 * @section Spacing
 */
$g-spacing: $type__size--base !default;


/**
 * The map of layout spacings

 * Small: 12, 8, 4
 * Base: 16
 * Large: 24, 32, 40, 48, 56, 72, 96
 *
 * @nuclide spacing
 * @section Spacing
 */
$g-spacings: (
  small:  (
    1x: floor($g-spacing - 4),
    2x: floor($g-spacing / 2),
    3x: floor($g-spacing / 4),
  ),
  default: (
    1x: $g-spacing,
  ),
  large: (
    1x: ceil($g-spacing / 2 * 3),
    2x: ceil($g-spacing / 2 * 4),
    3x: ceil($g-spacing / 2 * 5),
    4x: ceil($g-spacing / 2 * 6),
    5x: ceil($g-spacing / 2 * 7),
    6x: ceil($g-spacing / 2 * 9),
    7x: ceil($g-spacing / 2 * 12),
  )
);


/**
 * Retrieve a space from the $g-spacings map
 *
 * @mixin spacing
 * @section Functions
 * @param $type
 *  The spacing map to use. Default: default
 * @param $size
 *  The value desired from the map. Default: 1x
 * @example
 *  padding: spacing();
 *  padding: spacing(large, 4x);
 */
@function spacing($type: default, $size: 1x) {
  // Verify the type exists
  @if not(map-has-key($g-spacings, $type)) {
    $allowed: map-keys($g-spacings);
    @error 'Invalid spacing type name: `#{$type}`. Allowed type: #{$allowed}';
  }

  // Verify the size
  @if not(map-has-key(map-get($g-spacings, $type), $size)) {
    $allowed: map-keys(map-get($g-spacings, $type));
    @error 'Invalid size: `#{$size}`. Allowed sizes for `#{$type}` are: #{$allowed}';
  }

  @return map-get(map-get($g-spacings, $type), $size);
}


/**
 * Base vertical spacing class
 */
::ng-deep .u-vertical-spacing {
  margin-bottom: $g-spacing;
}


/**
 * Loop over the map and create vertical layout utility classes
 * Example: `.u-spacing__large--2x`
 */
// Loop over the vertical spacing map
@each $size, $collection in $g-spacings {

  // Loop over each collection (ie 'small')
  @each $x, $spacing in $collection {
    ::ng-deep .u-vertical-spacing__#{$size}--#{$x} {
      margin-bottom: $spacing;
    }
  }

}
